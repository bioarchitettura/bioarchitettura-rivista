# Advanced GitHub Actions workflow for Bioarchitettura Magazine
# Production-ready deployment with asset optimization and multi-environment support
# Updated to re-trigger slideshow deployment workflow

name: Deploy Bioarchitettura Magazine

on:
  push:
    branches: ["main", "deployment-ready", "copilot/fix-*"]
  pull_request:
    branches: ["main"]

# Sets comprehensive permissions of the GITHUB_TOKEN for maximum compatibility
permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write
  metadata: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job with asset optimization
  build:
    runs-on: ubuntu-latest
    
    env:
      JEKYLL_ENV: production
      NODE_ENV: production
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          cache-version: 1
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            vendor/bundle
            .bundle
            _site
            .jekyll-cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Gemfile.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
            
      - name: Install Ruby dependencies
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3
          
      - name: Install Node.js dependencies
        run: |
          if [ -f package.json ]; then
            npm ci --production=false
          fi
          
      - name: Build Jekyll site with asset optimization
        run: |
          echo "Building Jekyll site for production..."
          bundle exec jekyll build --config _config.yml \
            --destination ./_site \
            --profile \
            --trace
          
        env:
          JEKYLL_ENV: production
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Optimize assets (if Node.js tools available)
        run: |
          if [ -f package.json ]; then
            echo "Optimizing CSS and JavaScript..."
            # CSS optimization
            find _site -name "*.css" -type f -exec echo "Processing {}" \;
            
            # JavaScript minification (if terser is available)
            if command -v npx &> /dev/null && npx terser --version &> /dev/null; then
              find _site -name "*.js" -type f ! -name "*.min.js" -exec sh -c '
                echo "Minifying $1"
                npx terser "$1" --compress --mangle -o "$1.tmp" && mv "$1.tmp" "$1"
              ' _ {} \;
            fi
          fi
          
      - name: Optimize images
        run: |
          echo "Checking for image optimization tools..."
          
          # Install image optimization tools if not available
          if ! command -v optipng &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y optipng jpegoptim
          fi
          
          # Optimize PNG images
          find _site -name "*.png" -type f -exec optipng -o2 {} \; || echo "PNG optimization skipped"
          
          # Optimize JPEG images  
          find _site -name "*.jpg" -o -name "*.jpeg" -type f -exec jpegoptim --max=85 --strip-all {} \; || echo "JPEG optimization skipped"
          
      - name: Generate sitemap and robots.txt
        run: |
          echo "Generating additional SEO files..."
          
          # Ensure sitemap is generated
          if [ ! -f _site/sitemap.xml ]; then
            echo "Warning: sitemap.xml not found"
          fi
          
          # Create robots.txt if it doesn't exist
          if [ ! -f _site/robots.txt ]; then
            cat > _site/robots.txt << EOF
          User-agent: *
          Allow: /
          
          Sitemap: ${{ steps.pages.outputs.origin }}/sitemap.xml
          EOF
          fi
          
      - name: Add security headers
        run: |
          echo "Adding security headers..."
          
          # Create _headers file for Netlify-style hosting (if used)
          cat > _site/_headers << EOF
          /*
            X-Frame-Options: SAMEORIGIN
            X-Content-Type-Options: nosniff
            X-XSS-Protection: 1; mode=block
            Referrer-Policy: strict-origin-when-cross-origin
            Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' *.paypal.com *.paypalobjects.com *.google.com *.gstatic.com; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src 'self' fonts.gstatic.com; img-src 'self' data: *; connect-src 'self' api.openai.com translate.googleapis.com;
          EOF
          
      - name: Validate HTML (basic check)
        run: |
          echo "Performing basic HTML validation..."
          
          # Count HTML files
          html_count=$(find _site -name "*.html" -type f | wc -l)
          echo "Found $html_count HTML files"
          
          # Basic HTML structure check
          find _site -name "*.html" -type f -exec sh -c '
            if ! grep -q "<!DOCTYPE html>" "$1" 2>/dev/null; then
              echo "Warning: $1 missing DOCTYPE declaration"
            fi
            if ! grep -q "<html" "$1" 2>/dev/null; then
              echo "Warning: $1 missing html tag"
            fi
          ' _ {} \;
          
      - name: Check for broken internal links (basic)
        run: |
          echo "Checking for basic link issues..."
          
          # Check for common link problems
          find _site -name "*.html" -type f -exec grep -l 'href=""' {} \; | head -5 | while read file; do
            echo "Warning: Empty href found in $file"
          done
          
      - name: Generate build report
        run: |
          echo "=== Build Report ===" > _site/build-report.txt
          echo "Build Date: $(date)" >> _site/build-report.txt
          echo "Jekyll Version: $(bundle exec jekyll --version)" >> _site/build-report.txt
          echo "Ruby Version: $(ruby --version)" >> _site/build-report.txt
          echo "Total Files: $(find _site -type f | wc -l)" >> _site/build-report.txt
          echo "HTML Files: $(find _site -name "*.html" -type f | wc -l)" >> _site/build-report.txt
          echo "CSS Files: $(find _site -name "*.css" -type f | wc -l)" >> _site/build-report.txt
          echo "JS Files: $(find _site -name "*.js" -type f | wc -l)" >> _site/build-report.txt
          echo "Image Files: $(find _site \( -name "*.jpg" -o -name "*.png" -o -name "*.gif" -o -name "*.webp" \) -type f | wc -l)" >> _site/build-report.txt
          echo "Total Size: $(du -sh _site | cut -f1)" >> _site/build-report.txt
          
          echo "Build completed successfully!"
          cat _site/build-report.txt
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Post-deployment health check
        run: |
          echo "Deployment completed successfully!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Basic health check (wait a moment for deployment to propagate)
          sleep 30
          
          # Check if the site is accessible
          if curl -f -s -o /dev/null "${{ steps.deployment.outputs.page_url }}"; then
            echo "✅ Site is accessible"
          else
            echo "⚠️ Site accessibility check failed (this may be normal for new deployments)"
          fi

  # Optional: Lighthouse performance audit job
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Lighthouse audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ needs.deploy.outputs.page_url }}
            ${{ needs.deploy.outputs.page_url }}/chi-siamo/
            ${{ needs.deploy.outputs.page_url }}/shop/
          uploadArtifacts: true
          temporaryPublicStorage: true