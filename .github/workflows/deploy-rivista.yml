# GitHub Actions workflow for deploying the 'rivista' branch to GitHub Pages
name: Deploy Rivista to GitHub Pages

"on":
  # Trigger on pushes to the rivista branch
  push:
    branches: ["rivista"]
  
  # Allow manual workflow dispatch
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment for rivista branch, skipping runs queued between 
# the run in-progress and latest queued. However, do NOT cancel in-progress runs as we 
# want to allow these production deployments to complete.
concurrency:
  group: "pages-rivista"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout rivista branch
        uses: actions/checkout@v4
        with:
          ref: rivista
          
      - name: Detect site structure
        id: detect
        run: |
          if [ -d "public" ]; then
            echo "Site content found in public/ directory"
            echo "source_dir=public" >> $GITHUB_OUTPUT
          elif [ -d "dist" ]; then
            echo "Site content found in dist/ directory"  
            echo "source_dir=dist" >> $GITHUB_OUTPUT
          elif [ -f "_config.yml" ]; then
            echo "Jekyll site detected, using root directory"
            echo "source_dir=." >> $GITHUB_OUTPUT
            echo "use_jekyll=true" >> $GITHUB_OUTPUT
          else
            echo "Using root directory for static site"
            echo "source_dir=." >> $GITHUB_OUTPUT
          fi
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Setup Ruby (if Jekyll site detected)
        if: steps.detect.outputs.use_jekyll == 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
        continue-on-error: true
          
      - name: Build with Jekyll (if Jekyll site detected)
        if: steps.detect.outputs.use_jekyll == 'true'
        run: |
          if command -v bundle >/dev/null 2>&1; then
            bundle exec jekyll build --destination ./_site
          else
            echo "Warning: Jekyll build failed, deploying as static site"
            mkdir -p _site
            cp -r ${{ steps.detect.outputs.source_dir }}/* _site/ 2>/dev/null || true
            if [ ! -f "_site/index.html" ]; then
              cp index.html _site/ 2>/dev/null || echo "<h1>Site deployment in progress</h1>" > _site/index.html
            fi
          fi
        continue-on-error: true
        
      - name: Prepare static site (if not Jekyll)
        if: steps.detect.outputs.use_jekyll != 'true'
        run: |
          mkdir -p _site
          source_dir="${{ steps.detect.outputs.source_dir }}"
          
          echo "Preparing static site from source directory: $source_dir"
          
          if [ "$source_dir" = "." ]; then
            # Copy all relevant files from root directory, excluding build artifacts and git files
            find . -maxdepth 1 -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.ico" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" -o -name "*.txt" -o -name "*.xml" -o -name "*.json" \) -exec cp {} _site/ \;
            
            # Copy directories that are likely web assets, but avoid Jekyll/system directories
            for dir in assets images css js public static media fonts; do
              if [ -d "$dir" ] && [ "$dir" != ".git" ] && [ "$dir" != ".github" ] && [ "$dir" != "_site" ]; then
                echo "Copying directory: $dir"
                cp -r "$dir" _site/
              fi
            done
          else
            # Copy from specific source directory
            if [ -d "$source_dir" ]; then
              echo "Copying from $source_dir to _site"
              cp -r "$source_dir"/* _site/ 2>/dev/null || {
                echo "Warning: Failed to copy from $source_dir, trying individual files"
                find "$source_dir" -type f -exec cp {} _site/ \; 2>/dev/null || true
              }
            else
              echo "Warning: Source directory $source_dir does not exist"
            fi
          fi
          
          # Ensure index.html exists
          if [ ! -f "_site/index.html" ]; then
            if [ -f "index.html" ]; then
              echo "Copying root index.html to _site"
              cp index.html _site/
            elif [ -f "$source_dir/index.html" ]; then
              echo "Using index.html from $source_dir"
              cp "$source_dir/index.html" _site/
            else
              echo "Creating fallback index.html"
              cat > _site/index.html << 'ENDHTML'
          <!DOCTYPE html>
          <html lang="it">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Rivista - Bioarchitettura</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  h1 { color: #2c5530; }
              </style>
          </head>
          <body>
              <h1>Rivista Bioarchitettura</h1>
              <p>Site deployment in progress...</p>
          </body>
          </html>
          ENDHTML
            fi
          fi
          
          # List what was deployed for debugging
          echo "Contents of _site directory:"
          find _site -type f | head -20
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job to gh-pages branch
  deploy:
    environment:
      name: github-pages-rivista
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ./artifact
          
      - name: Extract artifact
        run: |
          cd artifact
          tar -xzf artifact.tar.gz
          ls -la
          
      - name: Setup gh-pages branch
        run: |
          # Check if gh-pages branch exists remotely
          if git ls-remote --heads origin gh-pages | grep -q "gh-pages"; then
            echo "gh-pages branch exists, checking it out"
            git fetch origin gh-pages:gh-pages
            git checkout gh-pages
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf . 2>/dev/null || true
            # Clear any remaining files
            find . -maxdepth 1 ! -name '.git' ! -name '.' ! -name '..' -exec rm -rf {} + 2>/dev/null || true
          fi
          
      - name: Deploy to gh-pages
        run: |
          # Clear existing content (except .git)
          find . -maxdepth 1 ! -name '.git' ! -name '.' ! -name '..' -exec rm -rf {} + 2>/dev/null || true
          
          # Copy new content from artifact
          cp -r artifact/* . 2>/dev/null || {
            echo "Warning: Failed to copy all files, trying individual copy"
            find artifact -type f -exec cp {} . \; 2>/dev/null || true
          }
          
          # Add .nojekyll file to bypass Jekyll processing on GitHub Pages
          echo "" > .nojekyll
          
          # Create a simple .gitignore for the gh-pages branch
          echo "# GitHub Pages deployment branch" > .gitignore
          
          # Stage all changes
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to deploy"
            echo "deployment-status=no-changes" >> $GITHUB_ENV
          else
            # Commit and push changes
            git commit -m "Deploy rivista branch to gh-pages - $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            git push origin gh-pages
            echo "Successfully deployed to gh-pages branch"
            echo "deployment-status=success" >> $GITHUB_ENV
            
            # Set the page URL output for the environment
            echo "page_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_ENV
          fi
          
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: rivista â†’ gh-pages" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ env.deployment-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.deployment-status }}" = "success" ]; then
            echo "- **Site URL**: ${{ env.page_url }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Files" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find . -type f ! -path './.git/*' | head -20 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY